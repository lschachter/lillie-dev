modalID: 1
title: Graphs
date: 2020-02-25
img: graphs.jpg
client: See More
clientLink: "https://github.com/lschachter/algorithm-practice/blob/master/Graphs.ipynb"
category: Problems
description: |
    ### **Clone Graph**

    **Prompt**
    
    Given a reference of a node in a connected undirected graph, return a deep copy (clone) of the graph.
    Each node in the graph contains a val (`int`) and a list (`List[Node]`) of its neighbors.
    The given node will always be the first node with `val = 1`. You must return the copy of the given node as a reference to the cloned graph.

    **Solution**
    
    First thing's first, we need to traverse the graph, so either a DFS or BFS will work. Let's go with a DFS. For each new node on the stack, if it hasn't been seen yet we need to create a new node that references it, then loop through its neighbors to create new nodes for each of those. But we need to track the new nodes somehow to ensure that we don't create multiple copies for a single value that has multiple neighbors. Let's keep the new nodes in a dictionary of `node.val: node` so that when we get to a node _in_ seen, we can easily return that node's clone instead. And in fact, we can check the dictionary _instead_ of a seen set. 

    **Space and Time Complexity**
    
    This is a classic dfs that is ensured to be connected, which means that we don't need to do an initial loop through all of the nodes to make sure they're all hit. If there were no edges, we would not still loop through multiple nodes: to remain connected, a graph with no edges would be only a single node. So I believe the run time is actually `O(E)`, E being the number of edges. Technically it's E + 1, but it reduces. Space-wise, the visited dictionary is `O(V + E)`.

    ```python3
    """
    # Definition for a Node.
    class Node:
        def __init__(self, val, neighbors):
            self.val = val
            self.neighbors = neighbors
    """
    class Solution:
        def cloneGraph(self, node: 'Node') -> 'Node':
            if not node: return 
            self.visited = {}
            return self.dfs(node)
        
        def dfs(self, node):
            if node.val not in self.visited:
                newNode = Node(node.val, [])
                self.visited[node.val] = newNode
                for nei in node.neighbors:
                    newNode.neighbors.append(self.dfs(nei))
                return newNode
            return self.visited[node.val]       
    ```


    ### **Knight's Tour**

    **Prompt**
    
    You are given a `rows * cols` chessboard and a knight that moves like in normal chess. 
    Currently knight is at starting position denoted by `start_row` row and `start_col` col, and want to reach at ending position denoted by `end_row` row and `end_col` col. The goal is to calculate the minimum number of moves that the knight needs to take to get from starting position to ending position.
    `start_row`, `start_col`, `end_row` and `end_col` are 0-indexed. 

    Return an integer. If it is possible to reach from starting position to ending position then return minimum number of moves that the knight needs to take to get from starting position to ending position. If it is not possible to reach from starting position to ending position then return -1.
    
    **Solution**
    
    It's looking for the shortest path so I want to go with BFS. We're given a starting node, so we just need to BFS from there, keeping track of the number of moves at each step. Compare each node we land at to the end node and return the # of moves if we hit it. If the BFS ends and we haven't found the target, return -1.
    
    **Space and Time Complexity**
    
    This is a classic BFS except that we only ever start from a single node. So the runtime is _at most_ `O(m * n)` but stops when it finds the shortest path. In the worst case, space complexity is also `O(m * n)`.

    ```python3
    class Solution:
        def knight(self, rows, cols, start_r, start_c, end_r, end_c):
            self.rows, self.cols = rows, cols
            self.start_r, self.start_c = start_r, start_c
            self.end_r, self.end_c = end_r, end_c
            return self.bfs()
        
        def bfs(self):
            seen = set()
            dirs = [(1,2),(-1,2),(-2,1),(-2,-1),(-1,-2),(1,-2),(2,-1),(2,1)]
            q = [(self.start_r, self.start_c, 0)]
            while q:
                x, y, moves = q.pop(0)
                if (x,y) == (self.end_r, self.end_c):
                    return moves
                seen.add((x,y))
                for xD, yD in dirs:
                    neiX = x + xD
                    neiY = y + yD
                    if (neiX, neiY) not in seen and 0 <= neiX < self.rows \
                    and 0 <= neiY < self.cols:
                        q.append((neiX, neiY, moves + 1))
            return -1
    ```

    ### **Alien Dictionary**

    **Prompt**
    
    There is a new alien language which uses the latin alphabet. However, the order among letters are unknown to you. You receive a list of non-empty words from the dictionary, where words are sorted lexicographically by the rules of this new language. Derive the order of letters in this language.

    **Note**

    1. You may assume all letters are in lowercase.
    2. You may assume that if a is a prefix of b, then a must appear before b in the given dictionary.
    3. If the order is invalid, return an empty string.
    4. There may be multiple valid order of letters, return any one of them is fine.

    **Solution**
    
    We get some clues about what type of question this is in that letters are going to have to point to the letter that come after them in the alien dict, making this a graph problem. We're also told that we're looking for the order of the nodes (and if there is no valid order, i.e. if there is a cycle to return null), which requires a topological sort. So the trick is figuring out how to build the adjacency lists. We need each letter (node) to point to the letter that we know comes after it in the dictionary. Since the words are sorted by their first letters, we can do part of that work by comparing the first letter in each word going through the list in order. However for multiple words that begin with the same letter/s, we will need to loop through them to compare the first non-equal letter in those words. Once we find the first non-equal letter, we must break out of that comparison, because the letters _within_ a given word are not sorted. There are a few special quirks to this we need to keep in mind. We'll need to loop through all the words but compare one to the word next to it, so we'll want to loop (# of words - 1) times. within each comparison, we'll want to loop until we find a character **not** in common, but we'll need to ensure that we don't try to check past the length of the smaller of the two words. So this inner loop will only want to go for `(min(len(word1), len(word2))` times. Once we have our adjacency list, however, it is a classic topological sort with a cycle check.

    ```python3
    class Solution:
        def alienOrder(self, words: List[str]) -> str:
            self.adj_list = self.buildGraph(words)
            self.order = []
            self.seen = {}
            self.VISITING = -1
            self.VISITED = 0
            for word in words:
                for ch in word:
                    if self.buildValidOrder(ch) == -1:
                        return ""
            self.order.reverse()
            return "".join(self.order)
             
        def buildGraph(self, words):
            adj_list = {ch: set() for word in words for ch in word}
            num_words = len(words)
            for i in range(num_words - 1):
                min_chars = min(len(words[i]), len(words[i + 1]))
                for j in range(min_chars):
                    if words[i][j] != words[i + 1][j]:
                        adj_list[words[i][j]].add(words[i + 1][j])
                        break
            return adj_list
            
        def buildValidOrder(self, node):
            if node in self.seen:
                if self.seen[node] == self.VISITING:
                    return -1
                return
            
            self.seen[node] = self.VISITING
            for nei in self.adj_list[node]:
                if self.buildValidOrder(nei) == -1:
                    return -1
                
            self.seen[node] = self.VISITED
            self.order.append(node)
    ```
